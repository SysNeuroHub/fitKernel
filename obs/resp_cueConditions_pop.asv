
if ispc
    addpath(genpath('C:/Users/dshi0006/git'))
    saveFolder = 'E:/tmp/cuesaccade_data';
    rootFolder = '//storage.erc.monash.edu.au/shares/R-MNHS-Physio/SysNeuroData/Monash Data/Joanita/2021/cuesaccade_data/';
    %saveFolder = '//storage.erc.monash.edu/shares/R-MNHS-Syncitium/Shared/Daisuke/cuesaccade_data';
    %rootFolder = '//storage.erc.monash.edu.au/shares/R-MNHS-Physio/SysNeuroData/Monash Data/Joanita/2021/cuesaccade_data/';
elseif isunix
    addpath(genpath('/home/localadmin/Documents/MATLAB'));
    saveFolder = '/mnt/syncitium/Daisuke/cuesaccade_data';
    rootFolder = '/mnt/physio/Monash Data/Joanita/2021/cuesaccade_data/';
end

%% recorded data
animal = 'hugo';
dataType = 0;%0: each channel, 1: all channels per day


[loadNames, months, dates, channels] = getMonthDateCh(animal, rootFolder);

% to obtain index of specified month&date&channel
thisdata = find(1-cellfun(@isempty, regexp(loadNames, ...
    regexptranslate('wildcard','09September\16\*_ch27.mat'))));

%% omit data
% no saccade response
% low spontaneous firing
% low number of successful trials

% parameters
load('E:\tmp\cuesaccade_data\param20220719','param');
ncDirs = length(param.cardinalDir);

ivar = 1;
ii=1;
avgOnsetResp_pop=[]; theseDatech = [];
navgOnsetResp_pop=[];
for idata = 1:length(channels)
    datech = [months{idata} '/' dates{idata} '/' num2str(channels{idata})];
    disp(datech);
    
    saveSuffix = [animal replace(datech,'/','_')];
    saveName = fullfile(saveFolder, [saveSuffix '.mat']);
    
    %% load results
    try
        load(saveName, 'avgTOnsetByCue','winSamps_sacc','PSTH_f');
        
        h=cusumtest((1:numel(PSTH_f))', PSTH_f, 'plot','on','display='on')

        %substitute NANs to directions without a trial
        tmp = squeeze(avgTOnsetByCue(:,ivar,:,:));
        zerodir = (sum(tmp,2)==0);
        tmp(repmat(zerodir,[1 size(tmp,2) 1])) = nan;
        
        avgOnsetResp_pop(:,:,:,ii) = tmp;
        % target direction x varType  x time x wo/w cue x units
        navgOnsetResp = tmp/max(tmp(:));
        navgOnsetResp_pop(:,:,:,ii) = navgOnsetResp;
        
        theseDatech{ii} = datech;
        ii=ii+1;
    catch err
        continue;
    end
end
winSamps = winSamps_sacc;

%% simply mean/median across all units
for imtype = 1:2
    switch imtype
        case 1
            mtype = @nanmean;
        case 2
            mtype = @nanmedian;
    end
    
    figure;
    mavgOnsetResp_pop = squeeze(mtype(avgOnsetResp_pop,4));
    crange = prctile(mavgOnsetResp_pop(:),[0 100]);
    ax(1)=subplot(221);
    imagesc(winSamps, param.cardinalDir, mavgOnsetResp_pop(:,:,1));
    caxis(crange);ylabel('observed firing rate [Hz]');
    title('wo cue');
    ax(2)=subplot(222);
    imagesc(winSamps, param.cardinalDir, mavgOnsetResp_pop(:,:,2));
    caxis(crange);mcolorbar;
    title('w cue');
    
    nmavgOnsetResp_pop = squeeze(mtype(navgOnsetResp_pop,4));
    crange = prctile(nmavgOnsetResp_pop(:),[0 100]);
    ax(1)=subplot(223);
    imagesc(winSamps, param.cardinalDir, nmavgOnsetResp_pop(:,:,1));
    caxis(crange);ylabel('normalized firing rate');
    ax(2)=subplot(224);
    imagesc(winSamps, param.cardinalDir, nmavgOnsetResp_pop(:,:,2));
    caxis(crange);mcolorbar;
    
    screen2png(func2str(mtype));
    close;
end

%% simply mean/median across all units
nonanUnits=find(~isnan(sum(sum(sum((avgOnsetResp_pop))))));
for imtype = 1:2
    switch imtype
        case 1
            mtype = @nanmean;
        case 2
            mtype = @nanmedian;
    end
    
    figure;
    mavgOnsetResp_pop = squeeze(mtype(avgOnsetResp_pop(:,:,:,nonanUnits),4));
    crange = prctile(mavgOnsetResp_pop(:),[0 100]);
    ax(1)=subplot(221);
    imagesc(winSamps, param.cardinalDir, mavgOnsetResp_pop(:,:,1));
    caxis(crange);ylabel('observed firing rate [Hz]');
    title('wo cue');
    ax(2)=subplot(222);
    imagesc(winSamps, param.cardinalDir, mavgOnsetResp_pop(:,:,2));
    caxis(crange);mcolorbar;
    title('w cue');
    
    nmavgOnsetResp_pop = squeeze(mtype(navgOnsetResp_pop(:,:,:,nonanUnits),4));
    crange = prctile(nmavgOnsetResp_pop(:),[0 100]);
    ax(1)=subplot(223);
    imagesc(winSamps, param.cardinalDir, nmavgOnsetResp_pop(:,:,1));
    caxis(crange);ylabel('normalized firing rate');
    ax(2)=subplot(224);
    imagesc(winSamps, param.cardinalDir, nmavgOnsetResp_pop(:,:,2));
    caxis(crange);mcolorbar;
    
    screen2png([func2str(mtype) '_allDirs']);
    close;
end

%% 
param.times = 1e-3*(0:30:390);
taxis = param.times(1:end-1)+.5*mean(diff(param.times));
psthNames = cat(2,{'psth','psth_f','predicted_all'},...
    param.predictorNames,'pdiam ori');
winSamps = winSamps_conset;
tgtTimes = intersect(find(winSamps>0.03), find(winSamps<0.25));
% times = 1e-3*[0 50 100 150 200 250 300 350 400];

save('resp_cueConditions_pop.mat','avgOnsetResp_pop','navgOnsetResp_pop',...
    'theseDatech','taxis','winSamps','tgtTimes','psthNames');

%% triggered by tOnsets (only care about observed resp)
onsetName = 'cOnset';
ivar = 1; %observed resp


figure('position',[0 0 1400 1000]);
for icue = 1:3
    nvars = size(avgOnsetResp_pop,2);
    if icue <3
        thisData = squeeze(nanmean(avgOnsetResp_pop(:,ivar,:,icue,:),5));
    elseif icue ==3
        thisData = squeeze(diff(nanmean(avgOnsetResp_pop(:,ivar,:,:,:),5),1,4));
    end
    subplot(nvars, 3, 3*(ivar-1)+icue);
    imagesc(winSamps, param.cardinalDir, thisData);
    set(gca, 'ytick',param.cardinalDir);
    if icue==1
        ylabel(psthNames{ivar});
    end
    mcolorbar(gca,.5);
    if ivar == 1
        if icue==1
            title('wo cue');
        elseif icue ==2
            title('w cue');
        elseif icue == 3
            title('wcue-wocue');
        end
    end
end
xlabel(['time from' onsetName ' [s]']);
screen2png([onsetName '_all']);
close all;


%% trace per saccade direction
for idir=1:length(param.cardinalDir)
    nch = size(avgOnsetResp_pop,6);
    figure('position',[0 0 1400 1000]);
    nvars = size(avgOnsetResp_pop,2);
    tiledlayout('flow');
    axeshandle=[];
    for ivar = 1:nvars
        mData = squeeze(nanmean(avgOnsetResp_pop(idir,ivar,:,:,:),5));
        eData = 1/sqrt(nch)*squeeze(nanstd(avgOnsetResp_pop(idir,ivar,:,:,:),[],5));
        %subplot(nvars, 3, 3*(ivar-1)+icue);
        axeshandle(ivar) = nexttile;
        %imagesc(winSamps_onset, param.cardinalDir, thisData);
        errorbar(winSamps,mData(:,1),eData(:,1));
        hold on
        errorbar(winSamps,mData(:,2),eData(:,2));
        ylabel(psthNames{ivar});
        if ivar == 1
            legend('wo cue','w cue','location','northwest');
            title(num2str(param.cardinalDir(idir)));
        end
        vline(0);
        grid minor
    end
    % marginplots(axeshandle);%not compatible w tiledChartLayout
    xlabel(['time from' onsetName ' [s]']);
    screen2png([onsetName '_all_dir' num2str(param.cardinalDir(idir))]);
    close all;
end


%% limit channels by their preferred direction
onsetName = 'tOnset';
[~,prefDir] = max(mean(squeeze(avgOnsetResp_pop(:,1,tgtTimes,1,:)),2));
prefDir = squeeze(prefDir);

%nonanCh = find(~isnan(sum(sum(sum(sum(sum(avgOnsetResp_pop,1),2),3),4),5)));

for jdir = [1 5] %pref dir
    theseChannels = find(prefDir == jdir);
    for idir=[1 5] %stim dir
        nch = size(avgOnsetResp_pop,6);
        figure('position',[0 0 1400 1000]);
        nvars = size(avgOnsetResp_pop,2);
        tiledlayout('flow');
        axeshandle=[];
        for ivar = 1:nvars
            mData = squeeze(nanmean(avgOnsetResp_pop(idir,ivar,:,:,itrig,theseChannels),6));
            eData = 1/sqrt(nch)*squeeze(nanstd(avgOnsetResp_pop(idir,ivar,:,:,itrig,theseChannels),[],6));
            %subplot(nvars, 3, 3*(ivar-1)+icue);
            axeshandle(ivar) = nexttile;
            %imagesc(winSamps_onset, param.cardinalDir, thisData);
            errorbar(winSamps,mData(:,1),eData(:,1));
            hold on
            errorbar(winSamps,mData(:,2),eData(:,2));
            ylabel(psthNames{ivar});
            if ivar == 1
                legend('wo cue','w cue','location','northwest');
                title(['stimDir: ' num2str(param.cardinalDir(idir)) ...
                    ' prefDir: ' num2str(param.cardinalDir(jdir))]);
            end
            vline(0);
            grid minor
        end
        % marginplots(axeshandle);%not compatible w tiledChartLayout
        xlabel(['time from' onsetName ' [s]']);
        screen2png([onsetName '_all_StimDir' num2str(param.cardinalDir(idir)) ...
            '_PrefDir' num2str(param.cardinalDir(jdir))]);
        close all;
    end
end


%% resp aligned to preferred saccde direction
%preferred direction per channel
%[~, prefDirs] = max(squeeze(mean(mean(avgOnsetResp_pop(:,1,tgtTimes,:,2,:),3),4)));
[~, prefDirs] = max(squeeze(mean(avgOnsetResp_pop(:,1,tgtTimes,1,:),3)));
prefDirs = repmat(prefDirs, [size(avgOnsetResp_pop,2)*size(avgOnsetResp_pop,4)*size(avgOnsetResp_pop,5),1]);
prefDirs = prefDirs(:);

% target direction x varType x time x wo/w cue x trigger type x channels
pavgOnsetResp = permute(avgOnsetResp_pop, [3 1 2 4 5 6]);
[centeredDir, centeredData]  = alignMtxDir(pavgOnsetResp, tgtTimes, param.cardinalDir, prefDirs);
centeredData = permute(centeredData, [2 3 1 4 5 6]);



itrig = 2;
figure('position',[0 0 1400 1000]);
for icue = 1:3
    nvars = size(avgOnsetResp_pop,2);
    for ivar = 1:nvars
        if icue <3
            thisData = squeeze(nanmean(centeredData(:,ivar,:,icue,itrig,:),6));
        elseif icue ==3
            thisData = squeeze(diff(nanmean(centeredData(:,ivar,:,:,itrig,:),6),1,4));
        end
        subplot(nvars, 3, 3*(ivar-1)+icue);
        imagesc(winSamps, centeredDir, thisData);
        set(gca, 'ytick', centeredDir);
        if icue==1
            ylabel(psthNames{ivar});
        end
        mcolorbar(gca,.5);
        if ivar == 1
            if icue==1
                title('wo cue');
            elseif icue ==2
                title('w cue');
            elseif icue == 3
                title('wcue-wocue');
            end
        end
    end
end
xlabel(['time from' onsetName ' [s]']);
screen2png([onsetName '_all_centered_w']);
close all;

%% tuning curves
ncolumns = length(times)-1;
itrig = 2;
figure('position',[0 0 1400 1000]);
for it = 1:length(times)-1
    tidx = intersect(find(winSamps>times(it)), find(winSamps<times(it+1)));
    
    nvars = size(avgOnsetResp_pop,2);
    for ivar = 1:nvars
        meanData = squeeze(nanmean(mean(centeredData(:,ivar,tidx,:,itrig,:),3),6));
        seData = 1/sqrt(size(centeredData,6))*squeeze(nanstd(mean(centeredData(:,ivar,tidx,:,itrig,:),3),[],6));
        
        subplot(nvars, ncolumns, ncolumns*(ivar-1)+it);
        errorbar(repmat(centeredDir',[1 2]), meanData, seData);
        if ivar==1
            title(['after tonset' num2str(times(it)) '-' ...
                num2str(times(it+1))]);
        end
        if it==1
            ylabel(psthNames{ivar});
        end
        %axis padded
    end
end
marginplots;
screen2png([onsetName '_all_tuningCurves']);
close all;

